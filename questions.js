export const QUESTIONS = [
{
    type: "question",
    question: "Які методи HTTP-запитів ви знаєте?",
    answer: `GET, POST - главные, PUT, DELETE, PATCH... никогда не использовал
               CRUD - create read update delete`,
    topic: "Общие",
},

{
    type: "question",
    question: "Які версії HTTP-протоколу вам відомі?",
    answer: ` http 1.0, http 1.1 (current), http 2.0(current), http 3 `,
    topic: "Общие",
},

{
    type: "question",
    question: "Які знаєте коди відповіді (стану) HTTP?",
    answer: `200-ok, 404-absent resource, 400-bad request, 403-forbidden, 429-too many requests, 500-general server error, 502-bad gateway
     1-info, 2-ok codes, 4-client errors, 5-server errors`,
    topic: "Общие",
},

{
    type: "question",
    question: "Що таке Cross-Origin Resource Sharing? Як усунути проблеми з CORS?",
    answer: `Это технолгия, основная задача которой - защита от мошенничества. ПРи любом http запросе при учловии разного origin (domain name, protocol, port) должны быть соотв заголовки разрешащие такой запрос. Если их нет - будет cors ошибка.
    Исторически долгие годы скрипт с одного сайта вообще не мог получит никакого доступа к другому сайту. И это прям помогало
    Перед cors - вызов через коллбэк и тег скрипт (http://another.com/weather.json?callback=gotWeather;)
    Простой запрос - get post head, простые заголовки
    Сервер должен вернуть в ответе заголовок Access-Control-Allow-Origin`,
    topic: "Общие",
},

{
    type: "question",
    question: "Що таке cookie?",
    answer: `Информация которая хранится на клиенте
    Куки характерны для каждого отдельного домена
    в куках может хранится информация которую использует сайт при повторном заходе юзера на сайт
    В джаваскрипте есть методы которые позволяют прочитать записать или удалить куки у текущего юзера
    старейший метод аутентификации
    GDPR
    local storage session storage разработаны для замены но исползуются наравне 
    и не отправляются с каждым запросом, работа только через js `,
    topic: "Общие",
},

{
    type: "question",
    question: "Який максимальний розмір cookie?",
    answer: `Пара key=value - не больше 4кб. 20+ макс - зависит от браузера`,
    topic: "Общие",
},

{
    type: "question",
    question: "Що означає директива use strict?",
    answer: `используется только в начале файла или функции (переходной период)
    содержит набор правил которые ужесточают написание кода - в частности, точки с запятой, использовние переменных без объявления (кидает ошибку). Octal values (0800 теперь не восьмеричное значение)
    Классы модули включают по умолчанию`,
    topic: "Общие",
},

{
    type: "question",
    question: "Чим JS відрізняється під час роботи на front-end і back-end?",
    answer: `прежде всего корневой елемент - во фронтенде всегда есть window, в бекенде его нет (есть чтото другое)
    WEB API / Server API (файловая система, потоки)`,
    topic: "Общие",
},

{
    type: "question",
    question: "Що таке статична і динамічна типізації?",
    answer: `Есть языки обоих типов. Есть заблуждение компилируемый язык = статическая, интерпретируемый - динамическая
    Статическая - все переменные должны иметь типы при объявлении, менять эти тип нельзя. Js не такой
    `,
    topic: "Общие",
},

{
    type: "question",
    question: "Як клієнт взаємодіє із сервером?",
    answer: `Посредством http запросов имеющих разные типы, хедеры, боди если это post запрос, сложные запросы могут так же иметь пред-запросы. Сервер генерирует ответ который клиент понимает и дейсвтует в соответствии с ним
    `,
    topic: "Общие",
},

{
    type: "question",
    question: "Що таке REST?",
    answer: `Это модель representional state transfer - модель взаимодействие распределенного приложения в сети
    Компоненты ваимоействут посредсвом рест-запросов
    Альтернатива - RPC, remote procedure call`,
    topic: "Общие",
},

{
    type: "question",
    question: "Поясніть поняття мутабельність / іммутабельність? Які типи є мутабельними й навпаки?",
    answer: `immutable.js, object.freeze()
    Примитивы иммутабельны
    объекты и массивы мутабельны`,
    topic: "Общие",
},

{
    type: "question",
    question: "Як шукати помилки в коді? Чи використовуєте дебагер?",
    answer: `console log, debugger, breakpoints`,
    topic: "Общие",
},

{
    type: "question",
    question: "14.Яких відомих людей зі світу JS знаєте?",
    answer: `Jake Archibald, Kyle simpson - you don't know js`,
    topic: "Общие",
},

{
    type: "question",
    question: "Які існують типи даних у JS?",
    answer: `Стандартный ответ - null, undefined, number, string, bulean, object, symbol (new).
    Нестандартный - завиит от реализации. По спецификации - 7. По реализации - 
    BigInt, typeof null === object, "function". Типизированные массивы`,
    topic: "Js Core",
},

{
    type: "question",
    question: "Як перевірити, чи об’єкт є масивом?",
    answer: `Array.isArray()`,
    topic: "Js Core",
},

{
    type: "question",
    question: "Як перевірити, чи число є скінченним?",
    answer: `isFinite`,
    topic: "Js Core",
},

{
    type: "question",
    question: "Як перевірити, що змінна рівна NaN?",
    answer: `isNan, NaN !== NaN, Number.isNan`,
    topic: "Js Core",
},

{
    type: "question",
    question: "Чим відрізняється поведінка isNaN() та Number.isNaN()?",
    answer: `Number.isNan doesn't do coercion, introduced in ECMAScript 2015`,
    topic: "Js Core",
},

{
    type: "question",
    question: "Порівняйте ключові слова var, let, const.",
    answer: `let const блочная область видимости. 
        Var - видна за пределами {} (функциональная область, 
        объявление выполняетсся в начале функции - hoisting)
        `,
    topic: "Js Core",
},

{
    type: "question",
    question: "Що таке область видимості?",
    answer: `Это область в которой есть доступ к переменным объявленным внутри ее
        Блочная область видимоти и функциональная (не только функции но и модули)`,
    topic: "Js Core",
},

{
    type: "question",
    question: "Що таке деструктуризація?",
    answer: `Это метод присваивания, появившейся в ECMAscript2015?
    Актуально для массивов и обїектов. Позволяет быстро присвоить знаения из массива или обхекта
    let [a, b] = arr;
    let {name, surname} = obj;`,
    topic: "Js Core",
},

{
    type: "question",
    question: "Для чого призначені методи setTimeout і setInterval?",
    answer: `Короткий ответ - setTimeout позволяет запустить callback после определенного времени в ms. Возвращает id
    по которому можно такую задачу отменить, применяя clearTimeout. 3 аргумента - функция, время, параметры передаваемые
    в функцию. setInterval делает то же самое, только повторяет вызовы до отмены.
    Длинный ответ - эти методы добавляют функцию в список макротасок которые выполнятся после окночания следующего цикла
    Позволяет тем самым разбить длинную задачу например на подзадачи (цикл 1 - 1e9)`,
    topic: "Js Core",
},

{
    type: "question",
    question: "Порівняйте підходи роботи з асинхронним кодом: сallbacks vs promises vs async/await.",
    answer: `callbacks - запустить функцию обработчик после окончания текущей функции. Многие библиотеки по прежнему исопльзуют подход
    function ( ... , callback) который вызывает коллбек после окончания работы функции. Это создает callback hell - код растет влево
    promises решают эту проблему. Промис это фактически враппер вокруг какойто функциональности (любой). По завершению выполнения
    промиса выполняется либо функция resolve либо функция reject. Then/catch это просто удобные языковые конструкции для обработки этих событий
    async await просто еще более упрощают процесс работы с асинхронными функциями. Async помечает асинхронную функцию, await говорит браузеру ждать 
    результата выполнения
    async function asy() {
        return await ...
    } `,
    topic: "Js Core",
},

{
    type: "question",
    question: "Чи можна записувати нові властивості / функції в прототипи стандартних класів (Array, Object тощо)? Чому ні? У яких випадках це робити можна? Як убезпечити себе, якщо потрібно розширити прототип?",
    answer: `
    Нет нельзя - общее мнение, потому что каждая библиотека может это делать. Если разработчик один и не хочет получить 
    работу / показывать код - то можно. В корпоративной разрбаотке это должно быть критично запрещено. Sugar.js`,
    topic: "Js Core",
},

{
    type: "question",
    question: "Назвіть методи масивів, які пам’ятаєте, і скажіть, для чого вони потрібні.",
    answer: `pop(), push(), shift(), unshift(), reverse(), map() filter() reduce() every(), slice() splice(), fill() flat()
    indexof(), lastindexof() find() sort()`,
    topic: "Js Core",
},

{
    type: "question",
    question: "Які перебираючі методи масиву знаєте? У чому їхня відмінність?",
    answer: `forEach, map, filter, reduce, every, some`,
    topic: "Js Core",
},

{
    type: "question",
    question: "Як працюють оператори присвоєння / порівняння / рядкові / арифметичні / бітові тощо?",
    answer: `конактенация? описать операторы? могу, битовые - &, |, >>, <<`,
},

{
    type: "question",
    question: "Опишіть призначення і принципи роботи з колекціями Map і Set.",
    answer: `Это структуры данных, расширющие встроенные object и array.
    Map - это object, у которого ключами может быть объекты. set(key, value), get, clear, size, 
    delete(key), keys(), values(), entries(). forEach.
    Set это набор уникальных значений. add добавляет новое (chainable), дубликаты не добавляются. forEach`,
    topic: "Js Core",
},

{
    type: "question",
    question: "Що означає глибока (deep) та поверхнева (shallow) копія об’єкта? Як зробити кожну з них?",
    answer: `Shallow copy не копирует ссылки на элементы эбъекта. Это означает, что в копии изменение 
    значения приводит к изменениям в оригинале. Deep copy копирует значения всех ссылок внутри огбъекта.`,
    topic: "Js Core",
},

{
    type: "question",
    question: "Яка різниця між декларацією функції (function declaration) та функціональним виразом (function expression)?",
    answer: `FD всплывает и определяется в начале выполнения скрипта, функция вызывается в любом месте. FE не всплывает, 
    только после определения. Разный синтаксис`,
    topic: "Функции",
},

{
    type: "question",
    question: "Що таке анонімна функція?",
    answer: `функция у которой нет имени - () => {} или function(){}. Нельзя вызывать, можно присвоить или 
    передать в качестве аргумента`,
    topic: "Функции",
},

{
    type: "question",
    question: "Розкажіть про стрілкові функції (arrow function). В чому полягають відмінності стрілкових функцій від звичайних?",
    answer: `Нет своего this, this всегда ссылается на оригинальный объект (скоуп), другой синтаксис. Можно не писать return если однострочные
    нет arguments.`,
    topic: "Функции",
},

{
    type: "question",
    question: "Що таке і для чого використовують IIFE (Immediately Invoked Function Expression)?",
    answer: `Создание функции на лету и сразу же вызов. ( ... something which return fuction ...)();
    Пример - Создание области видимости для каждого отдельного скрипта или функции`,
    topic: "Функции",
},

{
    type: "question",
    question: "Що таке hoisting, як він працює для змінних і функцій?",
    answer: `В начале выполнения любого скрипта, браузер идет по скрипту и как бы поднимает 
    все определния переменных (только var) и функций. и только после опредления всего запускается код. 
    Это позволяло использовать переменные до их опредления. Let/const так не работает. `,
    topic: "Функции",
},

{
    type: "question",
    question: "Що таке замикання (closure) і які сценарії його використання?",
    answer: `Возможность вложненной функции иметь доступ к переменных из внешней области видимости 
    даже после выполнения внешней функции`,
    topic: "Функции",
},

{
    type: "question",
    question: `Як ви розумієте замикання? Що буде виведено в консолі в цьому випадку? 
    var f = function() {
        console.log(1);
      }
      
      var execute = function(f) {
        setTimeout(f, 1000);
      }
      
      execute(f); // что выведет в консоль и почему
      f = function() {
        console.log(2);
      }`,
    answer: `its not closure!!! setTimeout takes pointer to f function and runs it. Changing f doesn't change settimeout!
    setTimeout просто "разыменовывает указатель" и изменение переменной ни на что не влияет`,
    topic: "Функции",
},
{
    type: "question",
    question: "Що таке рекурсія?",
    answer: `Вызов функцией самой себя. Base case, recursion case. Maximum stack exceeded. Not for production.`,
    topic: "Функции",
},
{
    type: "question",
    question: "Що означає ключове слово this?",
    answer: `Ссылка на контекст выполнения функции. Проблема в том что this в javascript определяется в момент выполнения 
    функции. This указывает на объект на котором выполняется функция. use strict - undefined, без use strict - ссылка на 
    глобальный объект. Может теряться при хитрых вызовах. Трюк - user.hi()`,
    topic: "Функции",
},

{
    type: "question",
    question: "Що таке втрата контексту, коли відбувається і як їй запобігти?",
    answer: `Потеря this при определенных обстоятельствах. (user.age > 18 ? user.hi : user.bye)() - this будет undefined. 
    вызывать с определенным this через call/bind/apply`,
    topic: "Функции",
},

{
    type: "question",
    question: "Методи функцій bind / call / apply — навіщо і в чому різниця?",
    answer: `call - вызывает функцию с this и аргументами. Apply - аргументы в виде массива. 
    Bind - создает обертку не вызывая функцию`,
    topic: "Функции",
},

{
    type: "question",
    question: "Що таке DOM?",
    answer: `Document Object Model - это модель представления HTML документа в виде дерева. 
    Узлы - элементы, каждый тег - это объект. Текст внутри любого тега - так же объект
    Используется в js, можно добавлять элементы к любым узлам. 
    Есть еще CSSOM и BOM - browser object model`,
    topic: "HTML",
},

{
    type: "question",
    question: "Порівняйте атрибути підключення скрипту async і defer в HTML-документі.",
    answer: `Исторический метод - без этих ключевых слов. Проблема - скрипт вверху не видит элементы ниже и блокирует
    загрузку страницы. Можно перенести тег скрипт вниз файла, но у этого есть тоже свои проблемы, если странница объемная
    это создает заметную задержку. 
    Async - скрипт не зависит от документа. Такие скрипты могут загружаться в любом порядке. 
    Defer - загрузка скрипта в фоновом режиаме, запуск когда закончится загрузка ДОМ. Defer никогда не блокируют страницу.
    Всегда выполняются в том порядке, в котором находятся на странице.`,
    topic: "HTML",
},

{
    type: "question",
    question: "Яка різниця між властивостями HTML-елементів innerHTML і innerText?",
    answer: `InnerHTML получает синтаксис HTML. Между тегами елемента на котором он вызван. Часть спецификации DOM
    InnerText возвращает или устанавливает текст, который возвращает бразуер (с некоторыми ограничениями). 
    Метод от майкрософт. TextContent `,
    topic: "HTML",
},

{
    type: "question",
    question: "Опишіть процес спливання (bubbling) подій у DOM.",
    answer: `У любого события есть три стадии - capturing target bubbling. Первые две стадии по умолчанию 
    перехватить нельзя совсем. В процессе высплытия событие сначала происходит на самом нижнем узле ДОМ (например кнопке)
    и потом начинает по порядку проходить через все узлы дерева до document. На любом этапе на любом узле событие можно 
    перехватить, если есть соотв событие. В таком обработчике будет передан объект контекста, который отличается от события,
    но в целом там будет всегда target и currentTarget. Первый - ссылка на исходный обхект, второе - текущий обхект на 
    котором выполняется обработчик. 
    Почти все событие вспдывают (не все)
    AddEventListener ('onclick', function, options (capture) )`,
    topic: "HTML",
},

{
    type: "question",
    question: "Як зупинити спливання (bubbling) події?",
    answer: `stopPropagation and stopImmidiatePropagation
    Не стоит делать это зря, например аналитика или баннеры`,
    topic: "HTML",
},

{
    type: "question",
    question: "Як зупинити дефолтну обробку події?",
    answer: ``,
    topic: "HTML",
},

{
    type: "question",
    question: "Чому дорівнює this в обробнику подій (event handler)?",
    answer: ``,
    topic: "HTML",
},

{
    type: "question",
    question: "Що таке LocalStorage і SessionStorage? Який максимальний розмір LocalStorage?",
    answer: ``,
    topic: "HTML",
},

{
    type: "question",
    question: "Як отримати висоту блоку? Його положення щодо меж документа?",
    answer: ``,
    topic: "HTML",
},

{
    type: "question",
    question: "Що таке webpack?",
    answer: ``,
    topic: "HTML",
},

{
    type: "question",
    question: "Чим відрізняється dev-збірка від prod?",
    answer: ``,
    topic: "HTML",
},

{
    type: "question",
    question: "Що таке блокова модель CSS?",
    answer: ``,
    topic: "CSS",
},

{
    type: "question",
    question: "Які способи центрування блокового контенту по горизонталі та вертикалі знаєте?",
    answer: ``,
    topic: "CSS",
},

{
    type: "question",
    question: "Які підходи у верстці вам відомі (float, flex, grid, etc)?",
    answer: ``,
    topic: "CSS",
},

{
    type: "question",
    question: "Які підходи у верстці вам відомі (float, flex, grid, etc)?",
    answer: ``,
    topic: "CSS",
},

{
    type: "question",
    question: "Як зробити додаток responsive?",
    answer: ``,
    topic: "CSS",
},

{
    type: "question",
    question: "Які є принципи семантичної верстки?",
    answer: ``,
    topic: "CSS",
},

{
    type: "question",
    question: "Навіщо потрібні префікси для деяких CSS-властивостей (-webkit-, -moz- тощо)?",
    answer: ``,
    topic: "CSS",
},

{
    type: "question",
    question: "Як спростити написання кросбраузерних стилів?",
    answer: ``,
    topic: "CSS",
},

{
    type: "question",
    question: "Що таке CSS-препроцесори? З якими працювали? Що нового вони приносять у стандартний CSS?",
    answer: ``,
    topic: "CSS",
},

{
    type: "question",
    question: "",
    answer: ``,
    topic: "React",
},

{
    type: "question",
    question: "",
    answer: ``,
    topic: "React",
},


// React
// 95.Чи працювали з класовими компонентами? У чому їхня особливість?
// 96.Які дані краще зберігати в стані компонента, а які передавати через пропси? Наведіть приклад.
// 97.Чи ознайомлені з хуками? У чому їхні переваги? Чи доводилося робити свої і з якою метою?
// 98.Чи ознайомлені з фрагментами та порталами? Навіщо вони потрібні?
// 99.Коли й для чого використовують рефи?
// 100.Які ви знаєте методи життєвого циклу компонента?
// 101.В якому методі життєвого циклу компонента краще робити запити на сервер? Чому?
// 102.В якому методі життєвого циклу компонента краще робити підписку і відписку від лістенера? Чому? Навіщо відписуватися?
// 103.Чи був досвід роботи з контекстом? Коли його варто використовувати?
// 104.У чому особливість PureComponent?
// 105.Чи працював з мемоізованими селекторами (memoized selectors)? Для чого їх використовують і який принцип роботи?
// 106.У чому бачите переваги бібліотеки React?
// 107.Чому бібліотека React швидка? Що таке Virtual DOM і Shadow DOM?
// 108.Навіщо в списках ключі? Чи можна робити ключами індекси елементів масиву? Коли це виправдано?
// 109.В чому основна ідея Redux?
// 110.Робота зі стилями в React.
// 111.React — це бібліотека чи фреймворк? Яка різниця між цими двома поняттями.
// 112.Чи можна використовувати jQuery разом з React? Чому так / ні?
// 113.Що таке codemod?
// 114.Чи доводилося налаштовувати проєкт React з нуля? За допомогою яких інструментів ви це робили?
// 115.Перерахуйте всі бібліотеки, які використовували у зв’язці з React.
// 116.Що найскладніше доводилося реалізовувати за допомогою React?

// Back-end
// 117.Що таке REPL?
// 118.Що таке streams в Node.js?
// 119.Що таке middleware?
// 120.Для чого використовують функцію setImmediate?
// 121.Навіщо потрібен app.param() в express?
// 122.Що таке token based authentication?

// Інструменти
// 131.Щоразу, коли ви робите pull, чомусь трапляється конфлікт в останньому рядку в усіх файлах, які ви редагували. Що відбувається?
// 132.Що робить команда git fetch?
// 133.Які git hygiene підходи ви знаєте?
// 134.Що таке CI/CD? Для чого це потрібно?

// Практичні завдання
// 135.Розкажіть, які є способи копіювання простого об’єкта типу obj = {a: 1, b: 2, c: 3}
// 136.Напишіть deep clone для об’єкта.
// 137.Назвіть різні способи, як поміняти місцями значення двох змінних.
// 138.Менеджер попросив у задачі поміняти статуси з «active, inactive» на «active, removed», але в коді фігурують тільки цифри й незрозуміло, який статус відповідає якій цифрі. Як допомогти майбутнім програмістам не лізти в документацію за кодом? Питання ставлять на конкретному прикладі з кодом.
// 139.Необхідно зробити мініпроєкт — список користувачів з формою створення/редагування користувача:

// Для зберігання користувачів використовуйте Firebase (це безкоштовно).
// Для стилізації використовуйте Bootstrap.
// Мінімальний набір полів користувача:
// ім’я;
// прізвище;
// електронна пошта;
// телефон (у форматі +380 (XX) XXX-XX-XX);
// дата народження;
// буде плюсом — додавання аватара та можливість crop-картинки.
// Список користувачів повинен мати можливість фільтрації та пагінацію.
// Проєкт має містити README-файл з кроками для запуску.
// },
];
