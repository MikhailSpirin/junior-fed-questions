const questions = [{
    type: "title",
    text: "Загальнi"
},
{
    type: "question",
    question: "Які методи HTTP-запитів ви знаєте?",
    answer: ```GET, POST - главные, PUT, DELETE, PATCH... никогда не использовал
               CRUD - create read update delete"```,
},

{
    type: "question",
    question: "Які версії HTTP-протоколу вам відомі?",
    answer: ``` http 1.0, http 1.1 (current), http 2.0(current), http 3 ```,
},

{
    type: "question",
    question: "Які знаєте коди відповіді (стану) HTTP?",
    answer: ``` 200-ok, 404-absent resource, 400-bad request, 403-forbidden, 429-too many requests, 500-general server error, 502-bad gateway
     1-info, 2-ok codes, 4-client errors, 5-server errors ```,
},

{
    type: "question",
    question: "Що таке Cross-Origin Resource Sharing? Як усунути проблеми з CORS?",
    answer: ``` ```,
},

{
    type: "question",
    question: "",
    answer: ``` ```,
},

{
    type: "question",
    question: "",
    answer: ``` ```,
},

{
    type: "question",
    question: "",
    answer: ``` ```,
},

{
    type: "question",
    question: "",
    answer: ``` ```,
},

{
    type: "question",
    question: "",
    answer: ``` ```,
},


// 4.
// Это технолгия, основная задача которой - защита от мошенничества. ПРи любом http запросе при учловии разного origin (domain name, protocol, port) должны быть соотв заголовки разрешащие такой запрос. Если их нет - будет cors ошибка.
// Исторически долгие годы скрипт с одного сайта вообще не мог получит никакого доступа к другому сайту. И это прям помогало
// Перед cors - вызов через коллбэк и тег скрипт (`http://another.com/weather.json?callback=gotWeather`;)
// Простой запрос - get post head, простые заголовки
// Серер должен вернуть в ответе заголовок Access-Control-Allow-Origin

// 5.Що таке cookie?
// Информация которая хранится на клиенте
// Куки характерны для каждого отдельного домена
// в куках может хранится информация которую использует сайт при повторном заходе юзера на сайт
// В джаваскрипте есть методы которые позволяют прочитать записать или удалить куки у текущего юзера
// старейший метод аутентификации
// GDPR
// local storage session storage разработаны для замены но исползуются наравне и не отправляются с каждым запросом, работа только через js 

// 6.Який максимальний розмір cookie?
// Пара key=value - не больше 4кб
// 20+ макс - зависит от браузера

// 7.Що означає директива use strict?
// используется только в начале файла или функции (переходной период)
// содержит набор правил которые ужесточают написание кода - в частности, точки с запятой, использовние переменных без объявления (кидает ошибку). Octal values (0800 теперь не восьмеричное значение)
// Классы модули включают по умолчанию

// 8.Чим JS відрізняється під час роботи на front-end і back-end?
// прежде всего корневой лемент - во фронтенде всегда есть window, в бекенде его нет (есть чтото другое)
// WEB API / Server API (файловая система, потоки)

// 9.Що таке статична і динамічна типізації?
// Есть языки обоих типов. Есть заблуждение компилируемый язык = статическая, интерпретируемый - динамическая
// Статическая - все переменные должны иметь типы при объявлении, менять эти тип нельзя. Js не такой

// 10.Як клієнт взаємодіє із сервером?
// Посредством http запросов имеющих разные типы, хедеры, боди если это post запрос, сложные запросы могут так же иметь пред-запросы. Сервер генерирует ответ который клиент понимает и дейсвтует в соответствии с ним

// 11.Що таке REST?
// Это модель representional state transfer - модель взаимодействие распределенного приложения в сети
// Компоненты ваимоействут посредсвом рест-запросов
// Альтернатива - RPC, remote procedure call

// 12.Поясніть поняття мутабельність / іммутабельність? Які типи є мутабельними й навпаки?
// immutable.js, object.freeze()
// Примитивы иммутабельны
// объекты и массивы мутабельны

// 13.Як шукати помилки в коді? Чи використовуєте дебагер?
// console log, debugger, breakpoints

// 14.Яких відомих людей зі світу JS знаєте?
// Jake Archibald, Kyle simpson - you don't know js

// JS Core




// 15.Які існують типи даних у JS?
// Стандартный ответ - null, undefined, number, string, bulean, object, symbol (new)
// Нестандартный - завиит от реализации. BigInt, typeof null === object, "function" 
// Типихированные массивы

// 16.Як перевірити, чи об’єкт є масивом?
// Array.isArray

// 17.Як перевірити, чи число є скінченним?
// isFiniate

// 18.Як перевірити, що змінна рівна NaN?
// isNan, NaN !== NaN, Number.isNan

// 19.Чим відрізняється поведінка isNaN() та Number.isNaN()?
// Number.isNan doesn't do coercion, introduced in ECMAScript 2015

// 20.Порівняйте ключові слова var, let, const.
// let const блочная область видимости. Var - видна за пределами {} (функциональная область, объявление выполняетсся в начале функции - hoisting

// Mikhail Spirin, [21.09.21 22:15]
// 21.Що таке область видимості?
// Это область в которой есть доступ к переменным объявленным внутри ее
// Блочная область видимоти и функциональная (не только функции но и модули)

// 22.Що таке деструктуризація?
// метод присваивания, появившейся в ECMAscript2015?
// Актуально для массивов и обїектов. Позволяет быстро присвоить знаения из массива или обхекта
// let [a, b] = arr;
// let {name, surname} = obj;

// 23.Для чого призначені методи setTimeout і setInterval?
// 24.Порівняйте підходи роботи з асинхронним кодом: сallbacks vs promises vs async/await.
// 25.Чи можна записувати нові властивості / функції в прототипи стандартних класів (Array, Object тощо)? Чому ні? У яких випадках це робити можна? Як убезпечити себе, якщо потрібно розширити прототип?
// 26.Назвіть методи масивів, які пам’ятаєте, і скажіть, для чого вони потрібні.
// 27.Які перебираючі методи масиву знаєте? У чому їхня відмінність?
// 28.Як працюють оператори присвоєння / порівняння / рядкові / арифметичні / бітові тощо?
// 29.Опишіть призначення і принципи роботи з колекціями Map і Set.
// 30.Що означає глибока (deep) та поверхнева (shallow) копія об’єкта? Як зробити кожну з них?

// Функції:
// 31.Яка різниця між декларацією функції (function declaration) та функціональним виразом (function expression)?
// 32.Що таке анонімна функція?
// 33.Розкажіть про стрілкові функції (arrow function). В чому полягають відмінності стрілкових функцій від звичайних?
// 34.Що таке і для чого використовують IIFE (Immediately Invoked Function Expression)?
// 35.Що таке hoisting, як він працює для змінних і функцій?
// 36.Що таке замикання (closure) і які сценарії його використання?
// 37.Як ви розумієте замикання? Що буде виведено в консолі в цьому випадку?

// var f = function() {
//   console.log(1);
// }

// var execute = function(f) {
//   setTimeout(f, 1000);
// }

// execute(f); // что выведет в консоль и почему

// f = function() {
//   console.log(2);
// }
// 38.Що таке рекурсія?
// 39.Що означає ключове слово this?
// 40.Що таке втрата контексту, коли відбувається і як їй запобігти?
// 41.Методи функцій bind / call / apply — навіщо і в чому різниця?

// Front-end
// 42.Що таке DOM?
// 43.Порівняйте атрибути підключення скрипту async і defer в HTML-документі.
// 44.Яка різниця між властивостями HTML-елементів innerHTML і innerText?
// 45.Опишіть процес спливання (bubbling) подій у DOM.
// 46.Як зупинити спливання (bubbling) події?
// 47.Як зупинити дефолтну обробку події?
// 48.Чому дорівнює this в обробнику подій (event handler)?
// 49.Що таке LocalStorage і SessionStorage? Який максимальний розмір LocalStorage?
// 50.Як отримати висоту блоку? Його положення щодо меж документа?
// 51.Що таке webpack?
// 52.Чим відрізняється dev-збірка від prod?

// Верстка
// 53.Що таке блокова модель CSS?
// 54.Які способи центрування блокового контенту по горизонталі та вертикалі знаєте?
// 55.Які підходи у верстці вам відомі (float, flex, grid, etc)?
// 56.Як зробити додаток responsive?
// 57.Які є принципи семантичної верстки?
// 58.Навіщо потрібні префікси для деяких CSS-властивостей (-webkit-, -moz- тощо)?
// 59.Як спростити написання кросбраузерних стилів?
// 60.Практичне завдання: прокоментувати та виправити приклад поганого CSS або HTML.
// 61.Що таке CSS-препроцесори? З якими працювали? Що нового вони приносять у стандартний CSS?

// Mikhail Spirin, [21.09.21 22:15]
// // Angular
// 62.Перерахуйте основні компоненти фреймворку (модуль, роут, директива тощо).
// 63.У чому різниця між компонентом і директивою?
// 64.Розкажіть про життєвий цикл компонента.
// 65.Перерахуйте часто використовувані хуки життєвого циклу компонента та розкажіть, для чого вони потрібні?
// 66.У чому різниця між конструктором і ngOnInit-хуком?
// 67.Як захистити роут від несанкціонованого доступу? Які механізми надає для цього фреймворк?
// 68.Що таке Lazy loading, як і для чого використовується?
// 69.Яке призначення RouterOutlet?
// 70.Як компоненти можуть взаємодіяти один з одним?
// 71.Як створити two-way binding властивість для компонента?
// 72.Які типи форм є у фреймворку? У яких випадках і що краще використовувати?
// 73.Які стани є у форми і як це можна застосувати?
// 74.Навіщо потрібні сервіси? Як з ними працювати?
// 75.Що таке singleton-сервіси? Яке їхнє призначення? Спосіб створення?
// 76.Які є способи оголошення сервісів?
// 77.Для чого потрібні модулі? Скільки їх має бути в проєкті?
// 78.Навіщо потрібні загальні модулі (shared)?
// 79.Які переваги типізації в TypeScript?
// 80.Які можливості TypeScript можна використовувати для типізації (тут мають на увазі інтерфейси, типи, enum тощо)?
// 81.Яка різниця між інтерфейсом і класом?
// 82.У чому різниця між інтерфейсом і абстрактним класом?
// 83.Яка різниця між інтерфейсом і типом?
// 84.Що таке RxJS? Як він використовується у фреймворку? Які компоненти фреймворку тісно пов’язані з ним?
// 85.Чим відрізняються Observable і Promise?
// 86.Для чого потрібні Subjects? Які типи Subjects існують?
// 87.Як зробити кілька послідовних запитів до API за допомогою HTTP-сервісу і RxJS?
// 88.Яка різниця між switchMap, concatMap, mergeMap?
// 89.Як можна конфігурувати Angular-застосунок?
// 90.Навіщо потрібні environment-файли? Коли їх краще не використовувати?
// 91.У чому різниця між «розумним» (smart) і «дурним» (dumb) компонентами? У яких випадках застосовується кожен з них?
// 92.У чому різниця між NgForm, FormGroup і FormControl і як їх застосовують для побудови форм?
// 93.Навіщо потрібен і як працює async pipe?
// 94.Як стежити за розвитком фреймворку? Яких відомих людей, пов’язаних з Angular, знаєте / читаєте?

// React
// 95.Чи працювали з класовими компонентами? У чому їхня особливість?
// 96.Які дані краще зберігати в стані компонента, а які передавати через пропси? Наведіть приклад.
// 97.Чи ознайомлені з хуками? У чому їхні переваги? Чи доводилося робити свої і з якою метою?
// 98.Чи ознайомлені з фрагментами та порталами? Навіщо вони потрібні?
// 99.Коли й для чого використовують рефи?
// 100.Які ви знаєте методи життєвого циклу компонента?
// 101.В якому методі життєвого циклу компонента краще робити запити на сервер? Чому?
// 102.В якому методі життєвого циклу компонента краще робити підписку і відписку від лістенера? Чому? Навіщо відписуватися?
// 103.Чи був досвід роботи з контекстом? Коли його варто використовувати?
// 104.У чому особливість PureComponent?
// 105.Чи працював з мемоізованими селекторами (memoized selectors)? Для чого їх використовують і який принцип роботи?
// 106.У чому бачите переваги бібліотеки React?
// 107.Чому бібліотека React швидка? Що таке Virtual DOM і Shadow DOM?
// 108.Навіщо в списках ключі? Чи можна робити ключами індекси елементів масиву? Коли це виправдано?
// 109.В чому основна ідея Redux?
// 110.Робота зі стилями в React.
// 111.React — це бібліотека чи фреймворк? Яка різниця між цими двома поняттями.
// 112.Чи можна використовувати jQuery разом з React? Чому так / ні?
// 113.Що таке codemod?
// 114.Чи доводилося налаштовувати проєкт React з нуля? За допомогою яких інструментів ви це робили?
// 115.Перерахуйте всі бібліотеки, які використовували у зв’язці з React.
// 116.Що найскладніше доводилося реалізовувати за допомогою React?

// Back-end
// 117.Що таке REPL?
// 118.Що таке streams в Node.js?
// 119.Що таке middleware?
// 120.Для чого використовують функцію setImmediate?
// 121.Навіщо потрібен app.param() в express?
// 122.Що таке token based authentication?

// Mikhail Spirin, [21.09.21 22:15]
// Бази даних
// 123.Напишіть простий запит для обчислення трьох авторів, у яких найбільше книг.
// 124.Напишіть запит, який вибирає останні три коментарі для конкретного користувача для двох таблиць: коментарі та користувачі.
// 125.Спроєктуйте просту схему бази даних для бібліотеки.
// 126.Для чого використовують SQL-оператор HAVING?
// 127.Навіщо використовують SQL-оператор LEFT JOIN?
// 128.Чим відрізняється embed- від reference-зв’язку в MongoDB?
// 129.В одному проєкті програмісти зберігають дані в MongoDB-колекції коментарів, використовуючи такі типи даних (дивіться нижче). Що поганого в цьому рішенні?

// id: ObjectID
// text: string
// author_id: string
// created_at: Date
// 130.У проєкті знадобилося внести зміни в структуру таблиць, додати кілька полів і індекси. Як програмісти будуть робити це на продакшені?

// Інструменти
// 131.Щоразу, коли ви робите pull, чомусь трапляється конфлікт в останньому рядку в усіх файлах, які ви редагували. Що відбувається?
// 132.Що робить команда git fetch?
// 133.Які git hygiene підходи ви знаєте?
// 134.Що таке CI/CD? Для чого це потрібно?

// Практичні завдання
// 135.Розкажіть, які є способи копіювання простого об’єкта типу obj = {a: 1, b: 2, c: 3}
// 136.Напишіть deep clone для об’єкта.
// 137.Назвіть різні способи, як поміняти місцями значення двох змінних.
// 138.Менеджер попросив у задачі поміняти статуси з «active, inactive» на «active, removed», але в коді фігурують тільки цифри й незрозуміло, який статус відповідає якій цифрі. Як допомогти майбутнім програмістам не лізти в документацію за кодом? Питання ставлять на конкретному прикладі з кодом.
// 139.Необхідно зробити мініпроєкт — список користувачів з формою створення/редагування користувача:

// Для зберігання користувачів використовуйте Firebase (це безкоштовно).
// Для стилізації використовуйте Bootstrap.
// Мінімальний набір полів користувача:
// ім’я;
// прізвище;
// електронна пошта;
// телефон (у форматі +380 (XX) XXX-XX-XX);
// дата народження;
// буде плюсом — додавання аватара та можливість crop-картинки.
// Список користувачів повинен мати можливість фільтрації та пагінацію.
// Проєкт має містити README-файл з кроками для запуску.
// },
]